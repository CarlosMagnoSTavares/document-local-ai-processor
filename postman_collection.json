{
  "info": {
    "_postman_id": "myelin-ocr-llm-collection-2024",
    "name": "üß† Document OCR LLM API - Complete Collection",
    "description": "Collection completa da API para an√°lise de documentos com OCR e modelos de linguagem locais (Ollama)\n\nüìã **Ordem de Execu√ß√£o:**\n1. Status & Info\n2. Smart Upload (Auto-Detection)\n3. Monitor Processing\n4. Get Results\n5. Compute Configuration\n6. Model Management\n7. Error Testing\n\nüîë **API Key:** myelin-ocr-llm-2024-super-secret-key\n\nüÜï **Novidades v1.2:**\n- ‚úÖ üöÄ SMART UPLOAD - Detec√ß√£o autom√°tica de tipo de arquivo\n- ‚úÖ ‚öôÔ∏è Configura√ß√£o CPU/GPU para Ollama\n- ‚úÖ üìä Logs verbosos com detec√ß√£o autom√°tica\n- ‚úÖ ü§ñ Download e gerenciamento de modelos\n- ‚úÖ üîÑ Persist√™ncia de configura√ß√µes",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "myelin-2024"
  },
  "item": [
    {
      "name": "üìä 1. Status & Information",
      "description": "Endpoints para verificar status da API e obter informa√ß√µes",
      "item": [
        {
          "name": "Health Check ‚úÖ",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Verifica se a API est√° funcionando corretamente.\n\n**Quando usar:** Primeiro teste a fazer\n**Resposta esperada:** Status healthy"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/health",
                  "host": ["{{base_url}}"],
                  "path": ["health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"healthy\",\n    \"message\": \"Document OCR LLM API is running\"\n}"
            }
          ]
        },
        {
          "name": "API Information üìñ",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            },
            "description": "Obt√©m informa√ß√µes sobre a API, endpoints e headers necess√°rios.\n\n**Quando usar:** Para conhecer a API\n**Resposta:** Documenta√ß√£o dos endpoints"
          },
          "response": [
            {
              "name": "API Info Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/",
                  "host": ["{{base_url}}"],
                  "path": [""]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Document OCR LLM API\",\n    \"version\": \"1.0.0\",\n    \"endpoints\": {\n        \"POST /upload\": \"Upload document for processing\",\n        \"GET /queue\": \"Get processing queue status\",\n        \"GET /response/{id}\": \"Get document response\",\n        \"GET /health\": \"Health check\"\n    },\n    \"required_headers\": {\n        \"Key\": \"API authentication key\",\n        \"Prompt\": \"Question about the document\",\n        \"Format-Response\": \"Expected response format\",\n        \"Model\": \"Ollama model name\",\n        \"Example\": \"Optional response example\"\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "üì§ 2. Smart Upload (Auto-Detection)",
      "description": "üöÄ UPLOAD INTELIGENTE - Detecta automaticamente o tipo de arquivo e usa a ferramenta correta",
      "item": [
        {
          "name": "Smart Upload - Image (Auto OCR) üñºÔ∏è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.document_id) {",
                  "        pm.collectionVariables.set('document_id', response.document_id);",
                  "        pm.collectionVariables.set('last_uploaded_filename', response.filename);",
                  "        console.log('‚úÖ Document uploaded successfully!');",
                  "        console.log('üìÑ Document ID:', response.document_id);",
                  "        console.log('üìÅ Filename:', response.filename);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Upload failed:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "üîë API Key para autentica√ß√£o"
              },
              {
                "key": "Prompt",
                "value": "Verifique qual CNPJ existe nesse documento e extraia todas as informa√ß√µes da empresa",
                "type": "text",
                "description": "‚ùì Pergunta sobre o documento"
              },
              {
                "key": "Format-Response",
                "value": "[{\"CNPJ\": \"\", \"empresa\": \"\", \"endereco\": \"\"}]",
                "type": "text",
                "description": "üìã Formato esperado da resposta (JSON)"
              },
              {
                "key": "Model",
                "value": "gemma3:1b",
                "type": "text",
                "description": "ü§ñ Modelo Ollama a utilizar"
              },
              {
                "key": "Example",
                "value": "[{\"CNPJ\": \"12.345.678/0001-90\", \"empresa\": \"Empresa Exemplo LTDA\", \"endereco\": \"Rua das Flores, 123\"}]",
                "type": "text",
                "description": "üìù Exemplo de resposta esperada"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "üìé Selecione o arquivo teste.jpg ou qualquer imagem (JPG, PNG) que contenha texto"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/upload",
              "host": ["{{base_url}}"],
              "path": ["upload"]
            },
            "description": "üöÄ SMART UPLOAD para imagens - O sistema detecta automaticamente que √© uma imagem e usa Tesseract OCR.\n\n**Auto-detec√ß√£o:** JPG, JPEG, PNG ‚Üí Tesseract OCR\n**Arquivo:** teste.jpg (inclu√≠do no projeto)\n**Processamento:** Auto-detec√ß√£o ‚Üí OCR ‚Üí LLM ‚Üí Resposta formatada"
          },
          "response": [
            {
              "name": "Upload Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Prompt",
                    "value": "Verifique qual CNPJ existe nesse documento"
                  },
                  {
                    "key": "Format-Response",
                    "value": "[{\"CNPJ\": \"\"}]"
                  },
                  {
                    "key": "Model",
                    "value": "gemma3:1b"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/upload",
                  "host": ["{{base_url}}"],
                  "path": ["upload"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"message\": \"Document uploaded and processing started\",\n    \"document_id\": 1,\n    \"filename\": \"teste.jpg\"\n}"
            }
          ]
        },
        {
          "name": "Smart Upload - PDF (Auto Parser) üìÑ",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "Prompt",
                "value": "Extraia todos os dados pessoais mencionados neste documento PDF",
                "type": "text"
              },
              {
                "key": "Format-Response",
                "value": "[{\"nome\": \"\", \"cpf\": \"\", \"rg\": \"\", \"endereco\": \"\", \"telefone\": \"\"}]",
                "type": "text"
              },
              {
                "key": "Model",
                "value": "gemma3:1b",
                "type": "text"
              },
              {
                "key": "Example",
                "value": "[{\"nome\": \"Jo√£o Silva\", \"cpf\": \"123.456.789-00\", \"rg\": \"12.345.678-9\", \"endereco\": \"Rua das Flores, 123\", \"telefone\": \"(11) 99999-9999\"}]",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "üìé Selecione um arquivo PDF"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/upload",
              "host": ["{{base_url}}"],
              "path": ["upload"]
            },
            "description": "üöÄ SMART UPLOAD para PDFs - O sistema detecta automaticamente que √© um PDF e usa PyPDF2 Parser.\n\n**Auto-detec√ß√£o:** PDF ‚Üí PyPDF2 Parser\n**Processamento:** Auto-detec√ß√£o ‚Üí PDF Parser ‚Üí LLM ‚Üí Resposta formatada"
          },
          "response": []
        },
        {
          "name": "Smart Upload - DOCX (Auto Parser) üìù",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "Prompt",
                "value": "Liste todas as empresas e CNPJs mencionados neste documento",
                "type": "text"
              },
              {
                "key": "Format-Response",
                "value": "[{\"empresa\": \"\", \"cnpj\": \"\", \"tipo\": \"\"}]",
                "type": "text"
              },
              {
                "key": "Model",
                "value": "gemma3:1b",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "üìé Selecione um arquivo DOCX"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/upload",
              "host": ["{{base_url}}"],
              "path": ["upload"]
            },
            "description": "üöÄ SMART UPLOAD para documentos Word - O sistema detecta automaticamente que √© um DOCX e usa python-docx Parser.\n\n**Auto-detec√ß√£o:** DOCX, DOC ‚Üí python-docx Parser\n**Processamento:** Auto-detec√ß√£o ‚Üí DOCX Parser ‚Üí LLM ‚Üí Resposta formatada"
          },
          "response": []
        },
        {
          "name": "Upload with Different Model (LLaMA3:8b) ü¶ô",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "Prompt",
                "value": "Analise este documento e extraia informa√ß√µes importantes de forma detalhada",
                "type": "text"
              },
              {
                "key": "Format-Response",
                "value": "[{\"tipo_documento\": \"\", \"informa√ß√µes_principais\": \"\", \"dados_espec√≠ficos\": \"\"}]",
                "type": "text"
              },
              {
                "key": "Model",
                "value": "llama3:8b",
                "type": "text",
                "description": "ü¶ô Modelo mais avan√ßado (requer download pr√©vio)"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "üìé Selecione qualquer arquivo suportado"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/upload",
              "host": ["{{base_url}}"],
              "path": ["upload"]
            },
            "description": "Exemplo de upload usando modelo LLaMA3:8b (mais preciso).\n\n**Pr√©-requisito:** Baixar modelo via endpoint /models/download\n**Quando usar:** Para an√°lises mais detalhadas\n**Vantagem:** Respostas mais precisas e elaboradas"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìã 3. Monitor Processing",
      "description": "Monitoramento do processamento dos documentos",
      "item": [
        {
          "name": "Get Queue Status üìä",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "üîë API Key para autentica√ß√£o"
              }
            ],
            "url": {
              "raw": "{{base_url}}/queue",
              "host": ["{{base_url}}"],
              "path": ["queue"]
            },
            "description": "Obt√©m o status de todos os documentos na fila de processamento.\n\n**Quando usar:** Para acompanhar o progresso\n**Status poss√≠veis:**\n- uploaded: Arquivo recebido\n- text_extracted: Texto extra√≠do\n- prompt_processed: LLM processou\n- completed: Finalizado\n- error: Erro no processamento"
          },
          "response": [
            {
              "name": "Queue Status Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/queue",
                  "host": ["{{base_url}}"],
                  "path": ["queue"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"total_documents\": 2,\n    \"queue\": [\n        {\n            \"document_id\": 2,\n            \"filename\": \"teste.jpg\",\n            \"status\": \"completed\",\n            \"created_at\": \"2024-01-01T10:30:00\",\n            \"updated_at\": \"2024-01-01T10:32:15\",\n            \"completed_at\": \"2024-01-01T10:32:15\"\n        },\n        {\n            \"document_id\": 1,\n            \"filename\": \"documento.pdf\",\n            \"status\": \"text_extracted\",\n            \"created_at\": \"2024-01-01T10:25:00\",\n            \"updated_at\": \"2024-01-01T10:27:30\",\n            \"completed_at\": null\n        }\n    ]\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "üì• 4. Get Results",
      "description": "Obten√ß√£o dos resultados processados",
      "item": [
        {
          "name": "Get Document Response üìã",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "üîë API Key para autentica√ß√£o"
              }
            ],
            "url": {
              "raw": "{{base_url}}/response/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["response", "{{document_id}}"]
            },
            "description": "Obt√©m a resposta processada para um documento espec√≠fico.\n\n**Quando usar:** Ap√≥s o upload para obter resultado\n**Vari√°vel:** document_id (preenchida automaticamente)\n**Aguardar:** Status 'completed' na queue"
          },
          "response": [
            {
              "name": "Completed Document Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/response/1",
                  "host": ["{{base_url}}"],
                  "path": ["response", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"document_id\": 1,\n        \"filename\": \"teste.jpg\",\n        \"status\": \"completed\",\n        \"created_at\": \"2024-01-01T10:30:00\",\n        \"completed_at\": \"2024-01-01T10:32:15\",\n        \"response\": \"[{\\\"CNPJ\\\": \\\"12.345.678/0001-90\\\", \\\"empresa\\\": \\\"Empresa Exemplo LTDA\\\"}]\",\n        \"llm_response\": \"Baseado na an√°lise da imagem, identifiquei o CNPJ 12.345.678/0001-90 pertencente √† empresa Empresa Exemplo LTDA.\"\n    }\n}"
            },
            {
              "name": "Processing Document Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/response/1",
                  "host": ["{{base_url}}"],
                  "path": ["response", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"document_id\": 1,\n        \"filename\": \"teste.jpg\",\n        \"status\": \"text_extracted\",\n        \"created_at\": \"2024-01-01T10:30:00\",\n        \"completed_at\": null,\n        \"message\": \"Document is still being processed\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Get Specific Document (ID: 1) üéØ",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/response/1",
              "host": ["{{base_url}}"],
              "path": ["response", "1"]
            },
            "description": "Exemplo fixo para obter resposta do documento ID 1.\n\n**Quando usar:** Para testar com ID espec√≠fico"
          },
          "response": []
        }
      ]
    },
    {
      "name": "‚öôÔ∏è 5. Compute Configuration",
      "description": "Configura√ß√£o de modo de processamento (CPU/GPU)",
      "item": [
        {
          "name": "Get Current Compute Mode üìä",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "üîë API Key para autentica√ß√£o"
              }
            ],
            "url": {
              "raw": "{{base_url}}/config/compute",
              "host": ["{{base_url}}"],
              "path": ["config", "compute"]
            },
            "description": "Obt√©m o modo de processamento atual do Ollama.\n\n**Quando usar:** Para verificar se est√° usando CPU ou GPU\n**Resposta:** Configura√ß√£o atual e vari√°veis de ambiente"
          },
          "response": [
            {
              "name": "Compute Mode Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/config/compute",
                  "host": ["{{base_url}}"],
                  "path": ["config", "compute"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"compute_mode\": \"cpu\",\n    \"gpu_enabled\": false,\n    \"cuda_devices\": \"\",\n    \"config\": {\n        \"OLLAMA_COMPUTE_MODE\": \"cpu\",\n        \"OLLAMA_GPU_ENABLED\": \"0\",\n        \"CUDA_VISIBLE_DEVICES\": \"\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Set CPU Mode üñ•Ô∏è",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "üîë API Key para autentica√ß√£o"
              },
              {
                "key": "Compute-Mode",
                "value": "cpu",
                "type": "text",
                "description": "üñ•Ô∏è Modo de processamento CPU"
              }
            ],
            "url": {
              "raw": "{{base_url}}/config/compute",
              "host": ["{{base_url}}"],
              "path": ["config", "compute"]
            },
            "description": "Configura o Ollama para usar apenas CPU.\n\n**Quando usar:** Para economizar energia ou quando n√£o h√° GPU\n**Efeito:** Reinicia Ollama em modo CPU"
          },
          "response": [
            {
              "name": "CPU Mode Set",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Compute-Mode",
                    "value": "cpu"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/config/compute",
                  "host": ["{{base_url}}"],
                  "path": ["config", "compute"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"message\": \"Compute mode set to CPU\",\n    \"compute_mode\": \"cpu\",\n    \"gpu_enabled\": false,\n    \"restart_required\": false\n}"
            }
          ]
        },
        {
          "name": "Set GPU Mode üöÄ",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "üîë API Key para autentica√ß√£o"
              },
              {
                "key": "Compute-Mode",
                "value": "gpu",
                "type": "text",
                "description": "üöÄ Modo de processamento GPU"
              }
            ],
            "url": {
              "raw": "{{base_url}}/config/compute",
              "host": ["{{base_url}}"],
              "path": ["config", "compute"]
            },
            "description": "Configura o Ollama para usar GPU (se dispon√≠vel).\n\n**Quando usar:** Para processamento mais r√°pido com GPU\n**Efeito:** Reinicia Ollama em modo GPU\n**Requisito:** CUDA compat√≠vel"
          },
          "response": [
            {
              "name": "GPU Mode Set",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Compute-Mode",
                    "value": "gpu"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/config/compute",
                  "host": ["{{base_url}}"],
                  "path": ["config", "compute"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"message\": \"Compute mode set to GPU\",\n    \"compute_mode\": \"gpu\",\n    \"gpu_enabled\": true,\n    \"restart_required\": false\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "ü§ñ 6. Model Management",
      "description": "Gerenciamento de modelos Ollama",
      "item": [
        {
          "name": "List Available Models üìã",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "üîë API Key para autentica√ß√£o"
              }
            ],
            "url": {
              "raw": "{{base_url}}/models/list",
              "host": ["{{base_url}}"],
              "path": ["models", "list"]
            },
            "description": "Lista todos os modelos Ollama dispon√≠veis no sistema.\n\n**Quando usar:** Para verificar modelos instalados\n**Resposta:** Lista de modelos com status"
          },
          "response": [
            {
              "name": "Models List Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/models/list",
                  "host": ["{{base_url}}"],
                  "path": ["models", "list"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"models\": [\n        {\n            \"name\": \"gemma3:1b\",\n            \"status\": \"available\"\n        },\n        {\n            \"name\": \"llama3:8b\",\n            \"status\": \"available\"\n        }\n    ],\n    \"total_models\": 2\n}"
            }
          ]
        },
        {
          "name": "Download New Model üì•",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "üîë API Key para autentica√ß√£o"
              },
              {
                "key": "Model-Name",
                "value": "gemma2:2b",
                "type": "text",
                "description": "ü§ñ Nome do modelo para download (equilibrado, 1.6GB)"
              }
            ],
            "url": {
              "raw": "{{base_url}}/models/download",
              "host": ["{{base_url}}"],
              "path": ["models", "download"]
            },
            "description": "Faz download de um novo modelo Ollama.\n\n**Quando usar:** Para instalar novos modelos\n**ü§ñ Modelos V√°lidos:**\n- **LLaMA 3**: llama3:8b, llama3:70b\n- **Gemma 2**: gemma2:2b, gemma2:9b, gemma2:27b\n- **Mistral**: mistral:7b, mistral:instruct\n- **Qwen 2**: qwen2:0.5b, qwen2:1.5b, qwen2:7b\n- **Phi-3**: phi3:mini, phi3:medium\n\n**üí° Recomenda√ß√µes:**\n- qwen2:0.5b (500MB) - Mais r√°pido\n- gemma2:2b (1.6GB) - Equilibrado\n- llama3:8b (4.7GB) - Mais preciso\n\n**Aten√ß√£o:** Download pode levar v√°rios minutos"
          },
          "response": [
            {
              "name": "Model Download Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Model-Name",
                    "value": "llama3:8b"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/models/download",
                  "host": ["{{base_url}}"],
                  "path": ["models", "download"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"message\": \"Model llama3:8b downloaded successfully\",\n    \"model_name\": \"llama3:8b\",\n    \"output\": \"pulling manifest\\npulling layers...\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "‚ùå 7. Error Testing",
      "description": "Testes de erro e valida√ß√£o",
      "item": [
        {
          "name": "Test Invalid API Key üîê",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Key",
                "value": "invalid-key-test-123",
                "type": "text",
                "description": "üö´ API Key inv√°lida para teste"
              }
            ],
            "url": {
              "raw": "{{base_url}}/queue",
              "host": ["{{base_url}}"],
              "path": ["queue"]
            },
            "description": "Testa o comportamento da API com uma chave inv√°lida.\n\n**Resultado esperado:** Erro 401 Unauthorized\n**Quando usar:** Para validar seguran√ßa"
          },
          "response": [
            {
              "name": "Invalid API Key Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Key",
                    "value": "invalid-key"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/queue",
                  "host": ["{{base_url}}"],
                  "path": ["queue"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"error\",\n    \"message\": \"Invalid API key\",\n    \"status_code\": 401\n}"
            }
          ]
        },
        {
          "name": "Test Invalid Model Download üö´",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "Model-Name",
                "value": "invalid:model",
                "type": "text",
                "description": "üö´ Modelo inv√°lido para teste de erro"
              }
            ],
            "url": {
              "raw": "{{base_url}}/models/download",
              "host": ["{{base_url}}"],
              "path": ["models", "download"]
            },
            "description": "Testa o comportamento quando se tenta baixar um modelo que n√£o existe.\n\n**Resultado esperado:** Erro 404 com mensagem clara\n**Quando usar:** Para validar tratamento de modelos inv√°lidos"
          },
          "response": [
            {
              "name": "Invalid Model Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Model-Name",
                    "value": "invalid:model"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/models/download",
                  "host": ["{{base_url}}"],
                  "path": ["models", "download"]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"error\",\n    \"message\": \"Model 'invalid:model' does not exist. Please check the model name and try again.\",\n    \"status_code\": 404\n}"
            }
          ]
        },
        {
          "name": "Test Document Not Found üîç",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/response/999999",
              "host": ["{{base_url}}"],
              "path": ["response", "999999"]
            },
            "description": "Testa o comportamento quando um documento n√£o existe.\n\n**Resultado esperado:** Erro 404 Not Found\n**Quando usar:** Para validar tratamento de erros"
          },
          "response": [
            {
              "name": "Document Not Found Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Key",
                    "value": "{{api_key}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/response/999999",
                  "host": ["{{base_url}}"],
                  "path": ["response", "999999"]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"error\",\n    \"message\": \"Document not found\",\n    \"status_code\": 404\n}"
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script global",
          "console.log('üöÄ Executando request para:', pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Test script global",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    console.log('‚úÖ Request executado com sucesso!');",
          "} else {",
          "    console.log('‚ùå Request falhou com status:', pm.response.code);",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string",
      "description": "üåê URL base da API"
    },
    {
      "key": "api_key",
      "value": "myelin-ocr-llm-2024-super-secret-key",
      "type": "string",
      "description": "üîë Chave de API para autentica√ß√£o"
    },
    {
      "key": "document_id",
      "value": "1",
      "type": "string",
      "description": "üìÑ ID do documento (preenchido automaticamente ap√≥s upload)"
    },
    {
      "key": "last_uploaded_filename",
      "value": "",
      "type": "string",
      "description": "üìÅ Nome do √∫ltimo arquivo enviado"
    }
  ]
} 